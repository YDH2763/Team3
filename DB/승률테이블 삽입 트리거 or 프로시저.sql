USE OMOK; 

 DROP TRIGGER IF EXISTS INSERT_RATING_USER;

# 승률 테이블에 회원가입한 유저 삽입
DELIMITER ?!
CREATE TRIGGER INSERT_RATING_USER AFTER INSERT
ON USER
FOR EACH ROW
BEGIN
	DECLARE _WR_U_NAME VARCHAR(10);
    SET _WR_U_NAME = (SELECT NEW.U_NAME);
    INSERT INTO WINNING_RATE(WR_U_NAME) VALUES
		(_WR_U_NAME);
END ?!
DELIMITER ;

# 내장함수 - 조건 
# IF(식, 식1, 식2) : 식이 참이면 식1을, 거짓이면 식2를 반환 
# IFNULL(식1, 식2) : 식1이 NULL이면 식2를, 아니면 식1을 반환
# NULLIF(식1, 식2) : 식1과 식2가 같으면 NULL, 다르면 식1을 반환
# CASE 속성 WHEN 값 THEN 결과 ELSE 결과 END
# CASE 속성
# 	WHEN 값
# 	THEN 결과
# END

DROP TRIGGER IF EXISTS CAUCULATE_RATE;
# 전적 테이블에 전적이 업데이트 되었을때 트리거 발동
DELIMITER //
CREATE TRIGGER CAUCULATE_RATE AFTER UPDATE 
ON SCORE
FOR EACH ROW
BEGIN
	DECLARE _S_U_NAME VARCHAR(10);
    DECLARE _S_POSITION ENUM("BLACK","WHITE");
    DECLARE _S_WIN INT;
    DECLARE _S_COUNT INT;
    
    DECLARE _S_ALLWIN INT;
    DECLARE _S_ALLCOUNT INT;
    
    SET _S_U_NAME = (SELECT NEW.S_U_NAME);
    SET _S_POSITION = (SELECT NEW.S_POSITION);
    SET _S_WIN = (SELECT NEW.S_WIN);
    SET _S_COUNT = (SELECT NEW.S_COUNT);
    
	SET _S_ALLWIN = (SELECT SUM(S_WIN) FROM SCORE WHERE S_U_NAME=NEW.S_U_NAME);
    SET _S_ALLCOUNT = (SELECT SUM(S_COUNT) FROM SCORE WHERE S_U_NAME=NEW.S_U_NAME);
	
    # 각각 승률입력하는 칼럼에 알맞는 변수들을 전달. 
    CALL CALCULATE_RATE_B_POSITION(_S_U_NAME, _S_POSITION, _S_WIN, _S_COUNT);
    CALL CALCULATE_RATE_W_POSITION(_S_U_NAME, _S_POSITION, _S_WIN, _S_COUNT);
    CALL CALCULATE_RATE_ALL(_S_U_NAME, _S_ALLWIN, _S_ALLCOUNT);
    
END//
DELIMIER;

/*
- TRIGGER_TIME : 트리거가 동작되는 시점. BEFORE | AFTER
- TRIGGER_EVENT : 트리거가 실행되는 이벤트. INSERT | UPDATE | DELETE
- 트리거 안에서 사용되는 키워드
 - OLD : DELETE, UPDATE 하기전 데이터. OLD.속성을 통해 활용 가능
 - NEW : INSERT, UPDATE 한 후 데이터. NEW.속성을 통해 활용 가능
*/

# 흑진영 승률 구하는 프로시저 
DROP PROCEDURE IF EXISTS CALCULATE_RATE_B_POSITION;

DELIMITER //
CREATE PROCEDURE CALCULATE_RATE_B_POSITION(
	IN _S_U_NAME VARCHAR(10),
	IN _S_POSITION ENUM ("BLACK","WHITE"),
    IN _S_WIN DOUBLE,
    IN _S_COUNT DOUBLE
)
BEGIN
	DECLARE WR_COUNT DOUBLE;
    SET WR_COUNT = CASE _S_COUNT WHEN 0 THEN _S_COUNT + 1 ELSE _S_COUNT END;
    
    UPDATE WINNING_RATE
	SET
		WR_BLACK = ((_S_WIN)/(WR_COUNT))*100 WHERE _S_POSITION = "BLACK" AND WR_U_NAME = _S_U_NAME;
       
    
END //
DELIMITER ;

# 백진영 승률 구하는 프로시저 AND 전체 승률 구하는 프로시저
DROP PROCEDURE IF EXISTS CALCULATE_RATE_W_POSITION;

DELIMITER //
CREATE PROCEDURE CALCULATE_RATE_W_POSITION(
	IN _S_U_NAME VARCHAR(10),
	IN _S_POSITION ENUM ("BLACK","WHITE"),
    IN _S_WIN DOUBLE,
    IN _S_COUNT DOUBLE
)
BEGIN
	
    DECLARE WR_COUNT DOUBLE;
    SET WR_COUNT = CASE _S_COUNT WHEN 0 THEN _S_COUNT + 1 ELSE _S_COUNT END;
	
    UPDATE WINNING_RATE
	SET
		WR_WHITE = ((_S_WIN)/(WR_COUNT))*100 WHERE _S_POSITION = "WHITE" AND WR_U_NAME = _S_U_NAME;
      
END //
DELIMITER ;

DROP PROCEDURE IF EXISTS CALCULATE_RATE_ALL;

DELIMITER //
CREATE PROCEDURE CALCULATE_RATE_ALL(
	IN _S_U_NAME VARCHAR(10),
    IN _S_ALLWIN DOUBLE,
    IN _S_ALLCOUNT DOUBLE
)
BEGIN
	
    UPDATE WINNING_RATE
	SET
		WR_ALL = ((_S_ALLWIN)/(_S_ALLCOUNT))*100 WHERE WR_U_NAME = _S_U_NAME;
      
END //
DELIMITER ;

/*
UPDATE WINNING_RATE SET WR_BLACK=((SELECT S_WIN FROM SCORE WHERE S_U_NAME = "정순형" AND S_POSITION = "BLACK")
/( SELECT S_COUNT  FROM SCORE WHERE S_U_NAME = "정순형" AND S_POSITION = "BLACK"))*100  WHERE WR_U_NAME = "정순형";
UPDATE WINNING_RATE SET WR_WHITE=((SELECT S_WIN FROM SCORE WHERE S_U_NAME = "정순형" AND S_POSITION = "WHITE")
/( SELECT S_COUNT  FROM SCORE WHERE S_U_NAME = "정순형" AND S_POSITION = "WHITE"))*100 WHERE WR_U_NAME = "정순형";
UPDATE WINNING_RATE SET WR_ALL=((SELECT SUM(S_WIN) FROM SCORE WHERE S_U_NAME = "정순형")
/( SELECT SUM(S_COUNT)  FROM SCORE WHERE S_U_NAME = "정순형" ))*100  WHERE WR_U_NAME = "정순형";
*/
# 참고할 수식
